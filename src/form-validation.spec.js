describe('angular-bootstrap-form-validation', function() {
	beforeEach(module('ui.bootstrap.validation'));

	function setup (html, initialScope) {
		var container;
		inject(function($compile, $rootScope) {
			if (angular.isDefined(initialScope)) {
				angular.extend($rootScope, initialScope);
			}

			container = $compile(html)($rootScope);
			$rootScope.$apply();
		});
		return container;
	}

	describe('uiValidationErrorMessages', function() {
		it('should thrown an error if used outside a form', function() {
			expect(function() {
				setup('<span ui-validation-error-messages></span>');
			}).toThrow();
		});

		it('should thrown an error if an input/select/textarea was not found', function() {
			expect(function() {
				setup('<form><span ui-validation-error-messages></span></form>');
			}).toThrow();
		});

		it('should not thrown an error if properly configured', function() {
			expect(function() {
				setup('<form><input name="model"><span ui-validation-error-messages></span></form>');
			}).not.toThrow();
		});

		it('should have an error message container', function() {
			var form = setup('<form><input name="model"><span ui-validation-error-messages></span></form>');

			var validationsContainer = form.find('div');
			expect(validationsContainer.hasClass('ui-validation')).toBe(true);
			expect(validationsContainer.hasClass('help-block')).toBe(true);
		});

		it('should show validation error for a required input', function() {
			var form = setup('<form><input name="model" ng-model="model" required><span ui-validation-error-messages></span></form>');

			var validations = form.find('small');
			expect(validations.length).toBe(1);
			expect(validations.text()).toBe('This field cannot be blank ');
		});

		it('should work inside input-group', function() {
			var form = setup('<form><div class="input-group"><input name="model" ng-model="model" required><span class="input-group-btn"><button type="button" class="btn btn-default">+</button></span></div><span ui-validation-error-messages></span></div></form>');

			var validations = form.find('small');
			expect(validations.length).toBe(1);
			expect(validations.text()).toBe('This field cannot be blank ');
		});

		it('should show validation errors for input fields generated by ng-repeat', function() {
			var form = setup('<form><div ng-repeat="e in [0,1,2]"><input name="model_{{e}}" ng-model="model" required><span ui-validation-error-messages></span></div></form>');

			var validations = form.find('small');
			expect(validations.length).toBe(3);
			for (var i = 0; i < 3; i++) {
				expect(angular.element(validations[i]).text()).toBe('This field cannot be blank ');
			}
		});

		it('should expose (in the scope) the values used in the validation (to appear in the validation message', function() {
			var form = setup('<form><input name="model" ng-model="model" ng-minlength="8"><span ui-validation-error-messages></span></form>');

			var validations = form.find('small');
			expect(validations.length).toBe(1);
			expect(validations.text()).toBe('Minimum length:  8');
		});

		it('should ignore ng-require value ("require" validation covers it)', function() {
			var form = setup('<form><input name="model" ng-model="model" ng-required="true"><span ui-validation-error-messages></span></form>');

			var validations = form.find('small');
			expect(validations.length).toBe(1);
			expect(validations.text()).toBe('This field cannot be blank ');
		});

		it('should parse validation values if necessary', function() {
			var form = setup('<form><input name="model" ng-model="model" ng-minlength="min"><span ui-validation-error-messages></span></form>',{
				min: 12
			});

			var validations = form.find('small');
			expect(validations.length).toBe(1);
			expect(validations.text()).toBe('Minimum length:  12');
		});
	});

	describe('uiValidationSubmit', function() {
		it('should prevent form submit in the presence of validation errors', function() {
			var form = setup('<form ui-validation-submit="action()"><input name="model" ng-model="model" ng-minlength="3"><span ui-validation-error-messages></span><button type="submit">Submit</button></form>', {
				model: 'ab',
				action: function() {
					this.model = 'success';
				}
			});

			var model = form.find('input').controller('ngModel');
			expect(model.$modelValue).toBe('ab');

			var formCtrl = form.controller('uiValidationSubmit');
			expect(formCtrl.attempted).toBe(false);

			form.triggerHandler('submit');
			expect(formCtrl.attempted).toBe(true);
			expect(model.$modelValue).toBe('ab');
		});

		it('should allow form submit when no validation errors have been found', function() {
			var form = setup('<form ui-validation-submit="action()"><input name="model" ng-model="model" ng-minlength="3"><span ui-validation-error-messages></span><button type="submit">Submit</button></form>', {
				model: 'abc',
				action: function() {
					this.model = 'success';
				}
			});

			var model = form.find('input').controller('ngModel');
			expect(model.$modelValue).toBe('abc');

			var formCtrl = form.controller('uiValidationSubmit');
			expect(formCtrl.attempted).toBe(false);

			form.triggerHandler('submit');
			expect(formCtrl.attempted).toBe(true);
			expect(model.$modelValue).toBe('success');
		});
	});

	describe('uiValidationShowErrors', function() {
		it('should thrown an error if used outside a form', function() {
			expect(function() {
				setup('<div ui-validation-show-errors></div>');
			}).toThrow();
		});

		it('should throw an error if the element does not have .form-group class', function() {
			expect(function() {
				setup('<form><div ui-validation-show-errors></div></form>');
			}).toThrow();
		});

		it('should throw an error when it does not have an input/selec/textarea child', function() {
			expect(function() {
				setup('<form><div class="form-group" ui-validation-show-errors></div></form>');
			}).toThrow();
		});

		it('should not thrown an error if properly configured', function() {
			expect(function() {
				setup('<form><div class="form-group" ui-validation-show-errors><input name="model" ng-model="model" ng-maxlength="4"></div></form>');
			}).not.toThrow();
		});

		it('should only have .has-error class after the form has been submitted when using uiValidationSubmit', function() {
			var form = setup('<form ui-validation-submit="action()"><div class="form-group" ui-validation-show-errors><input name="model" ng-model="model" ng-maxlength="4"><span ui-validation-error-messages></span></div></form>', {
				model: 'abcde',
				action: function() {
					this.model = 'success';
				}
			});

			var formCtrl = form.controller('uiValidationSubmit');
			expect(formCtrl.attempted).toBe(false);

			var formGroup = form.children();
			expect(formGroup.hasClass('form-group')).toBe(true);
			expect(formGroup.hasClass('has-error')).toBe(false);

			var model = form.find('input').controller('ngModel');
			expect(model.$modelValue).toBe('abcde');

			form.triggerHandler('submit');
			expect(formCtrl.attempted).toBe(true);
			expect(formGroup.hasClass('has-error')).toBe(true);
			expect(model.$modelValue).toBe('abcde');

			var validations = form.find('small');
			expect(validations.length).toBe(1);
			expect(validations.text()).toBe('Maximum length:  4');
		});
	});

	describe('uiCustomErrorMessage', function() {
		it('should throw an error if used (not implemented yet', function() {
			expect(function() {
				setup('<ui-custom-error-message></ui-custom-error-message>');
			}).toThrow();
		});
	});
});
